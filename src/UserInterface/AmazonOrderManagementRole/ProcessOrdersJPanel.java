/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AmazonOrderManagementRole;


import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AmazonOrderManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrderManagementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderProcessRequest;
import Business.WorkQueue.SupplierOrderRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class ProcessOrdersJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private AmazonOrderProcessRequest request;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem system;
    private UserAccount account;
    /**
     * Creates new form ProcessWorkRequestJPanel
     */
    public ProcessOrdersJPanel(JPanel userProcessContainer, EcoSystem system ,UserAccount account,AmazonOrderProcessRequest request, Organization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.request = request;
        this.enterprise = enterprise;
        this.system = system;
        this.account = account;
        refresh();
    }

    public void refresh() {
        DefaultTableModel dff = (DefaultTableModel) orderjTable.getModel();
        dff.setRowCount(0);

        AmazonOrderManagementOrganization aomo = null;
        for (Organization org : system.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof AmazonOrderManagementOrganization) {
                aomo = (AmazonOrderManagementOrganization) org;


                for (Order o : aomo.getMasterOrderList().getOrdersByCustomer(request.getSender().getCustomer())) {
                    if (request.getOrder().getOrderId()== o.getOrderId() ){
                    for (OrderItem item : o.getOrderItemList()) {
                        
                        Object[] orderRow = new Object[6];
                        orderRow[0] = item.getProduct().getProductId();
                        orderRow[1] = item;
                        orderRow[2] = item.getQuantity();
                        orderRow[3] = item.getProduct().getSellingPrice();
                        orderRow[4] = item.getEnterprise();
                        orderRow[5] = request.getResult();
                        dff.addRow(orderRow);
                    }
                }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        submitJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();

        submitJButton.setText("Submit Order to Supplier");
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Quantity", "Price", "Supplier", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderjTable);
        orderjTable.getColumnModel().getColumn(0).setResizable(false);
        orderjTable.getColumnModel().getColumn(1).setResizable(false);
        orderjTable.getColumnModel().getColumn(2).setResizable(false);
        orderjTable.getColumnModel().getColumn(3).setResizable(false);
        orderjTable.getColumnModel().getColumn(4).setResizable(false);
        orderjTable.getColumnModel().getColumn(5).setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130)
                        .addComponent(submitJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 719, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(submitJButton))
                .addContainerGap(168, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed
        
        
        int selectedRow = orderjTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }


        OrderItem item = (OrderItem) orderjTable.getValueAt(selectedRow, 1);
      Enterprise e = item.getEnterprise();
        SupplierOrderManagementOrganization sorg = null;
        for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof SupplierOrderManagementOrganization) {
                sorg = (SupplierOrderManagementOrganization) org;

                SupplierOrderRequest supRequest = new SupplierOrderRequest();
                supRequest.setSender(account);
                supRequest.setRequestDate(request.getRequestDate());
                supRequest.setProductId(item.getProduct().getProductId());
                supRequest.setQuantity(item.getQuantity());
                supRequest.setCustomer(request.getSender().getCustomer());
                supRequest.setStatus("Order Placed by Customer");
                supRequest.setResult("Incomplete");
                supRequest.setProductName(item.getProduct().getName());


                sorg.getWorkQueue().getWorkRequestList().add(supRequest);
                account.getWorkQueue().getWorkRequestList().add(supRequest);
                JOptionPane.showMessageDialog(null, "Your order is sent to the Supplier !!!");
            }
        }

        request.setResult("Order Sent to Respective Supplier");
        request.setStatus("Completed");
        
        
        refresh();
    }//GEN-LAST:event_submitJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderjTable;
    private javax.swing.JButton submitJButton;
    // End of variables declaration//GEN-END:variables
}
