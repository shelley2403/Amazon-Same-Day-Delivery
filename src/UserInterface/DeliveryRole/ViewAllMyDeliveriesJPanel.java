/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.DeliveryRole;

import UserInterface.SupplierOrderManagerRole.*;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order.OrderItem;
import Business.Organization.AmazonFinanceOrganization;
import Business.Organization.AmazonOrderManagementOrganization;
import Business.Organization.DeliveryManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrderManagementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderProcessRequest;
import Business.WorkQueue.AmazonPaymentValidationRequest;
import Business.WorkQueue.DeliveryRequest;
import Business.WorkQueue.SupplierOrderRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sony
 */
public class ViewAllMyDeliveriesJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private Organization organization;
    private EcoSystem system;
    private Enterprise enterprise;
    private UserAccount userAccount;
    /**
     * Creates new form ViewAllMyOrdersJPanel
     */
    public ViewAllMyDeliveriesJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.system = system;
        this.enterprise = enterprise;
        this.userAccount = account;
        sNameTextField.setText(enterprise.getName());
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

            DeliveryManagementOrganization dmo = null;
        for (Organization organization1 : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization1 instanceof DeliveryManagementOrganization) {
                dmo = (DeliveryManagementOrganization) organization1;

                for (WorkRequest request : dmo.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[9];
                    request.setReceiver(userAccount);
                    
                    row[0] = request.getSender().getEmployee().getName();
                    row[1] = request.getReceiver();
                    row[2] = ((DeliveryRequest) request);
                    row[3] = ((DeliveryRequest) request).getProductName();
                    row[4] = ((DeliveryRequest) request).getQuantity();
                    row[5]=  request.getRequestDate();
                    row[6] = request.getStatus();
                    row[7] = ((DeliveryRequest) request).getResult();
                    row[8] =  ((DeliveryRequest) request).getDeliveryDate();
                    model.addRow(row);
                }
            }
        }
    }
        
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        sNameTextField = new javax.swing.JTextField();
        backJButton = new javax.swing.JButton();
        viewDeliveryJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        resultJComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        submitJButton = new javax.swing.JButton();
        dateOfPurchasejDateChooser1 = new com.toedter.calendar.JDateChooser();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Order Id", "Product Name", "Quantity", "Order Date", "Status", "Result", "Delivery Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        workRequestJTable.setEnabled(false);
        jScrollPane1.setViewportView(workRequestJTable);
        workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(4).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(5).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(6).setResizable(false);
        workRequestJTable.getColumnModel().getColumn(7).setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Enterprise:");

        sNameTextField.setEditable(false);
        sNameTextField.setFont(new java.awt.Font("Georgia", 1, 18)); // NOI18N
        sNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        sNameTextField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, null, new java.awt.Color(102, 102, 102), null, null));

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        viewDeliveryJButton.setText("View Delivery Details");
        viewDeliveryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDeliveryJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product Id", "Customer Name", "City", "Customer Address", "Address (Continued)", "ZipCode", "Phone Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderjTable.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(orderjTable);

        resultJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Delivered on Same Day", "Delivered" }));
        resultJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultJComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Result :");

        jLabel3.setText("Delivery Date :");

        submitJButton.setText("Complete Delivery ");
        submitJButton.setEnabled(false);
        submitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(sNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(refreshJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resultJComboBox, 0, 198, Short.MAX_VALUE)
                            .addComponent(dateOfPurchasejDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(110, 110, 110)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(submitJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                            .addComponent(viewDeliveryJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(409, 409, 409)
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1032, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1022, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(199, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(sNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(refreshJButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(viewDeliveryJButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(submitJButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(backJButton))
                    .addComponent(dateOfPurchasejDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        ((CardLayout)userProcessContainer.getLayout()).previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void viewDeliveryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDeliveryJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }

        DeliveryRequest delRequest = (DeliveryRequest)workRequestJTable.getValueAt(selectedRow, 2);
//
        delRequest.setStatus("Processing");
        
        DefaultTableModel dff = (DefaultTableModel) orderjTable.getModel();
        dff.setRowCount(0);
        for (OrderItem item : delRequest.getOrder().getOrderItemList()) {
        if(item.getEnterprise().equals(enterprise)){
            Object[] orderRow = new Object[7];
                        
                        orderRow[0] = delRequest.getProductId();
                        orderRow[1] = delRequest.getCustomer();
                        orderRow[2] = delRequest.getCustomer().getCity();
                        orderRow[3] = delRequest.getCustomer().getAddress();
                        orderRow[4] = delRequest.getCustomer().getAddress1();
                        orderRow[5] = delRequest.getCustomer().getZipcode();
                        orderRow[6] = delRequest.getCustomer().getPhoneNo();
                        

                        dff.addRow(orderRow);
            
        
        }
        }
        
       submitJButton.setEnabled(true);
       populateTable();
//        ViewDeliveryDetailsJPanel vdJPanel = new ViewDeliveryDetailsJPanel(userProcessContainer,system ,userAccount,((DeliveryRequest) delRequest), organization, enterprise);
//        userProcessContainer.add("ViewDeliveryDetailsJPanel", vdJPanel);
//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        layout.next(userProcessContainer);

    }//GEN-LAST:event_viewDeliveryJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void submitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitJButtonActionPerformed

         int selectedRow = workRequestJTable.getSelectedRow();
         
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }
        
        if ("".equals(dateOfPurchasejDateChooser1.getDate())) {
                JOptionPane.showMessageDialog(null, "Please enter the Date Of Purchase");
                return;
            }

        DeliveryRequest delRequest = (DeliveryRequest)workRequestJTable.getValueAt(selectedRow, 2);
        String value  = (String)resultJComboBox.getSelectedItem();
       
        if(value.equals("Delivered on Same Day")){
            
            delRequest.setResult("Completed");
            delRequest.setStatus(value);
            delRequest.setDeliveryDate(String.valueOf(dateOfPurchasejDateChooser1.getDate()));
        }else{
            delRequest.setResult("Completed");
            delRequest.setStatus(value);
            delRequest.setDeliveryDate(String.valueOf(dateOfPurchasejDateChooser1.getDate()));
            
        }
        
        
        //for (OrderItem item : delRequest.getOrder().getOrderItemList()){
        //if (enterprise.equals(item.getEnterprise())){
        //Enterprise e = item.getEnterprise();
        
        int i = 0;
        int j = 0;
        AmazonOrderManagementOrganization aomo = null;
        for (Organization org : system.getOrganizationDirectory().getOrganizationList()) {
            if (org instanceof AmazonOrderManagementOrganization) {
                aomo = (AmazonOrderManagementOrganization) org;

                        WorkRequest ordRequest = null;
                        for (WorkRequest request : aomo.getWorkQueue().getWorkRequestList()) {
                            ordRequest = ((AmazonOrderProcessRequest) request);

                            System.err.println(aomo.getWorkQueue().getWorkRequestList());
                            System.err.println("Amazon" + ((AmazonOrderProcessRequest) request).getOrder().getOrderId());
                            System.err.println("Delivery " + delRequest.getOrder().getOrderId());
                            if (((AmazonOrderProcessRequest) request).getOrder().getOrderId() == delRequest.getOrder().getOrderId()) {
                                for (OrderItem item : delRequest.getOrder().getOrderItemList()) {
                                    if(item.getEnterprise().equals(enterprise)){
                                        
                                        item.setDeliveryStatus(value);
                                        item.setDeliveryDate(delRequest.getDeliveryDate());
                                //((AmazonOrderProcessRequest) request).setDeliveryResult(value);
                                //System.err.println(((AmazonOrderProcessRequest) request).getDeliveryResult());
                                //System.out.println("Amazon" + ((AmazonOrderProcessRequest) request).getOrder().getOrderId());
                                //System.out.println("Delivery " + delRequest.getOrder().getOrderId());
                                //i++;
                                //   userAccount.getWorkQueue().getWorkRequestList().add(request);
                                    }
                                    
                                    }

                            }

                        }
//                        if (i > 0) {
//                            aomo.getWorkQueue().getWorkRequestList().add(ordRequest);
//                            break;
//                        }

            }
        }
        
                        
       /*     AmazonFinanceOrganization afo = null;
        for (Organization org1 : system.getOrganizationDirectory().getOrganizationList()) {
            if (org1 instanceof AmazonFinanceOrganization) {
                afo = (AmazonFinanceOrganization) org1;

                        WorkRequest payRequest = null;
                        for (WorkRequest request : afo.getWorkQueue().getWorkRequestList()) {
                           // payRequest = ((AmazonPaymentValidationRequest)request);

                            System.err.println(afo.getWorkQueue().getWorkRequestList());
                            System.err.println("Amazon" + ((AmazonPaymentValidationRequest) request).getFinalInvoice().getOrder().getOrderId());
                            System.err.println("Delivery " + delRequest.getOrder().getOrderId());
                            if (((AmazonPaymentValidationRequest) request).getFinalInvoice().getOrder().getOrderId() == delRequest.getOrder().getOrderId()) {
                                ((AmazonPaymentValidationRequest) request).setDeliveryResult(value);
                                System.err.println(((AmazonPaymentValidationRequest) request).getDeliveryResult());
                                System.out.println("Amazon" + ((AmazonPaymentValidationRequest) request).getFinalInvoice().getOrder().getOrderId());
                                System.out.println("Delivery " + delRequest.getOrder().getOrderId());
                                j++;
                                //   userAccount.getWorkQueue().getWorkRequestList().add(request);

                            }

                        }
                        if (j > 0) {
                            afo.getWorkQueue().getWorkRequestList().add(payRequest);
                            break;
                        }

                    }
            
            } */
       // }
       // } 
        
        JOptionPane.showMessageDialog(null, "Your order is Delivered !!!");
        delRequest.setResult("Completed");
        populateTable();

    }//GEN-LAST:event_submitJButtonActionPerformed

    private void resultJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultJComboBoxActionPerformed
        // TODO add your handling code here:
//        String value  = (String)resultJComboBox.getSelectedItem();
//        if(value.equals("Delivered on Same Day")){
//            dateOfPurchasejDateChooser1.setEnabled(false);
//
//        }else{
//            dateOfPurchasejDateChooser1.setEnabled(true);
//        }
    }//GEN-LAST:event_resultJComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private com.toedter.calendar.JDateChooser dateOfPurchasejDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderjTable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JComboBox resultJComboBox;
    private javax.swing.JTextField sNameTextField;
    private javax.swing.JButton submitJButton;
    private javax.swing.JButton viewDeliveryJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
