/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AmazonOrderManagementOrganization;
import Business.Organization.DeliveryManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.PackagingOrganization;
import Business.Organization.SupplierOrderManagementOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderProcessRequest;
import Business.WorkQueue.DeliveryRequest;
import Business.WorkQueue.PackagingRequest;
import Business.WorkQueue.SupplierOrderRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sony
 */
public class TrackMyOrderJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    /**
     * Creates new form TrackMyOrderJPanel
     */
    public TrackMyOrderJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem system, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = system;
        this.organization = organization;
        this.enterprise = enterprise;
        populateTable();
    }

    private void populateTable() {
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statusjTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        orderIdJTextField = new javax.swing.JTextField();
        trackJButton = new javax.swing.JButton();

        statusjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sender", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(statusjTable);
        statusjTable.getColumnModel().getColumn(0).setResizable(false);
        statusjTable.getColumnModel().getColumn(1).setResizable(false);

        jLabel1.setText("Enter Order Id: ");

        trackJButton.setText("Track");
        trackJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trackJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(orderIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(trackJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(orderIdJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(trackJButton))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void trackJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trackJButtonActionPerformed
        // TODO add your handling code here:
        
        int OrderIdEntered = Integer.valueOf(orderIdJTextField.getText());
        
        DefaultTableModel model = (DefaultTableModel) statusjTable.getModel();
        model.setRowCount(0);

        AmazonOrderManagementOrganization aomo = null;
        for (Organization organization1 : system.getOrganizationDirectory().getOrganizationList()) {
            if (organization1 instanceof AmazonOrderManagementOrganization) {
                aomo = (AmazonOrderManagementOrganization) organization1;

                for (WorkRequest request : aomo.getWorkQueue().getWorkRequestList()) {

                    if(OrderIdEntered== ((AmazonOrderProcessRequest)request).getOrder().getOrderId()){
                    Object[] row = new Object[2];
                    row[0] = request.getReceiver() == null ? "Not Assigned" : request.getReceiver().getEmployee().getName();
                    row[1] = ((AmazonOrderProcessRequest)request).getResult();
                    model.addRow(row);
                }else{
                    
                    JOptionPane.showMessageDialog(null, "Invalid Order ID!!! Please enter proper the proper Order ID and try again.");
                    break;
        
                    }
                }

                for (Order o : aomo.getMasterOrderList().getOrdersByCustomer(userAccount.getCustomer())) {
                    if(o.getOrderId()== OrderIdEntered){
                    for (OrderItem item : o.getOrderItemList()) {
                     
                        
                        Enterprise ent = item.getEnterprise();

                        SupplierOrderManagementOrganization sorg = null;
                        DeliveryManagementOrganization dmo = null;
                        PackagingOrganization po = null;
                        for (Organization org : ent.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof SupplierOrderManagementOrganization) {
                                sorg = (SupplierOrderManagementOrganization) org;

                                for (WorkRequest request : sorg.getWorkQueue().getWorkRequestList()) {
                                    Object[] row = new Object[2];

                                    row[0] = request.getReceiver() == null ? "Not Assigned" : request.getReceiver().getEmployee().getName();
                                    row[1] = ((SupplierOrderRequest)request).getResult();


                                    model.addRow(row);
                                }
                            }
                            if(org instanceof PackagingOrganization){
                                po = (PackagingOrganization) org;
                                
                                for (WorkRequest request : dmo.getWorkQueue().getWorkRequestList()) {
                                    Object[] row = new Object[2];

                                    row[0] = request.getReceiver() == null ? "Not Assigned" : request.getReceiver().getEmployee().getName();
                                    row[1] = ((PackagingRequest)request).getResult();


                                    model.addRow(row);
                                }
                            
                            }
                            
                            if(org instanceof DeliveryManagementOrganization){
                                dmo = (DeliveryManagementOrganization) org;
                                
                                for (WorkRequest request : dmo.getWorkQueue().getWorkRequestList()) {
                                    Object[] row = new Object[2];

                                    row[0] = request.getReceiver() == null ? "Not Assigned" : request.getReceiver().getEmployee().getName();
                                    row[1] = ((DeliveryRequest)request).getResult();


                                    model.addRow(row);
                                }
                            
                            }
                          }
                        }

                    }
                }
            }
        }
    }//GEN-LAST:event_trackJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField orderIdJTextField;
    private javax.swing.JTable statusjTable;
    private javax.swing.JButton trackJButton;
    // End of variables declaration//GEN-END:variables
}
