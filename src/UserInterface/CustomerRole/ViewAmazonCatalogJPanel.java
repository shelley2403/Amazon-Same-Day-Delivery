/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.CustomerRole;


import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.InventoryManagementOrganization;
import Business.Organization.AmazonOrderManagementOrganization;
import Business.Organization.Organization;
import Business.ProductCatalog.Product;
import Business.UserAccount.UserAccount;
import UserInterface.InventoryManagerRole.SearchForProductJPanel;
import UserInterface.InventoryManagerRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author shruti
 */
public class ViewAmazonCatalogJPanel extends javax.swing.JPanel {

    /**
     * Creates new form OrderForCustomerJPanel
     */
    private JPanel userProcessContainer;
    private UserAccount account;
    private Organization organization;
    private Customer customerPerson;
    private Order tempOrder;
    private EcoSystem system;
    
    public ViewAmazonCatalogJPanel(JPanel uPC,Customer customerPerson, UserAccount account, EcoSystem system, Organization organization) {
        initComponents();        
        userProcessContainer = uPC;
        this.customerPerson = customerPerson;
        this.account= account;
        this.system = system;
        this.organization = organization;
                
        tempOrder = new Order();
        tempOrder.setCustomerPerson(customerPerson);
                  
       //productCatagory();
       //refreshProductTable();
       //refreshOrder();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        addToCartJButton = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productJTable = new javax.swing.JTable();
        viewProductjButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        searchProductjButton = new javax.swing.JButton();
        pCatJComboBox = new javax.swing.JComboBox();
        selectJButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        removejButton6 = new javax.swing.JButton();
        checkOutjButton7 = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        countryJTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        stateJTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cityJTextField = new javax.swing.JTextField();
        goJButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addToCartJButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addToCartJButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\sony\\Downloads\\cart-add-icon.png")); // NOI18N
        addToCartJButton.setText("Add To Cart");
        addToCartJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartJButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("Quantity:");

        productJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Product Id", "Price", "Availabilty", "Product Catagory", "Fulfilled By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productJTable);
        productJTable.getColumnModel().getColumn(0).setResizable(false);
        productJTable.getColumnModel().getColumn(1).setResizable(false);
        productJTable.getColumnModel().getColumn(2).setResizable(false);
        productJTable.getColumnModel().getColumn(3).setResizable(false);
        productJTable.getColumnModel().getColumn(4).setResizable(false);
        productJTable.getColumnModel().getColumn(5).setResizable(false);

        viewProductjButton3.setText("View Product");
        viewProductjButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProductjButton3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Select Your Catagory");

        searchProductjButton.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        searchProductjButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\sony\\Downloads\\search-icon.png")); // NOI18N
        searchProductjButton.setText("SEARCH PRODUCT IN NEARBY PLACES");
        searchProductjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductjButtonActionPerformed(evt);
            }
        });

        pCatJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Books and Audible", "Movies, Music & Games", "Electronics and Computers", "Home, Garden & Tools", "Beauty, Health & Grocery", "Toy, Kids & Babies", "Clothing, Shoes & Jewelry", "Sports & Outdoors", "Automotive & Industrial" }));
        pCatJComboBox.setEnabled(false);

        selectJButton.setText("Select");
        selectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(pCatJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(selectJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchProductjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(viewProductjButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(55, 55, 55)
                                .addComponent(addToCartJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 854, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 12, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(searchProductjButton)
                    .addComponent(pCatJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectJButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addToCartJButton)
                    .addComponent(viewProductjButton3)
                    .addComponent(jLabel4)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 890, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("ITEM LIST IN CART");

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Item Name", "Price", "Quantity", "Total Amount", "Supplier"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderJTable);

        removejButton6.setText("Remove");
        removejButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removejButton6ActionPerformed(evt);
            }
        });

        checkOutjButton7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        checkOutjButton7.setText("Check Out");
        checkOutjButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutjButton7ActionPerformed(evt);
            }
        });

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(removejButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(checkOutjButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(60, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(jLabel1)
                    .addContainerGap(710, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(36, Short.MAX_VALUE)
                .addComponent(removejButton6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton)
                    .addComponent(checkOutjButton7))
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(25, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addGap(199, 199, 199)))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, 890, 250));

        jLabel3.setText("Enter Country :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));
        add(countryJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 150, -1));

        jLabel7.setText("State :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, -1, -1));
        add(stateJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 60, 120, -1));

        jLabel8.setText("City :");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, -1, -1));
        add(cityJTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 60, 180, -1));

        goJButton.setText("GO>>>");
        goJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goJButtonActionPerformed(evt);
            }
        });
        add(goJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 60, 140, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 255));
        jLabel10.setText("Search Product in your Region!!!");
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 310, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartJButtonActionPerformed
        // TODO add your handling code here:
        
        int quantity = (Integer)jSpinner1.getValue();
        int selectedCount = productJTable.getSelectedRow();
        if(selectedCount<0)
        {
            JOptionPane.showMessageDialog(null, "Select a row first");
            return;
        }
        
        Product selectedProduct =(Product) productJTable.getValueAt(selectedCount, 4);
        
        if(quantity <=0 || quantity>=selectedProduct.getAvailability())
        {
            JOptionPane.showMessageDialog(null, "Please Enter Proper Quantity");
            return;
        }

        
//        int selectRow = prodjTable1.getSelectedRow();
//        Enterprise selectedEnterprise =(Enterprise) prodjTable1.getValueAt(selectRow, 5);
        
       
        //refreshOrder();
        //refreshProductTable();
        
        String countryName = countryJTextField.getText();
        String stateName = stateJTextField.getText();
        String cityName = cityJTextField.getText();
        
        Network network = system.getNetwork();
        for (Network country : network.getNetworkList()) {
            if (countryName.equalsIgnoreCase(country.getName())) {

                for (Network state : country.getNetworkList()) {
                    if (stateName.equalsIgnoreCase(state.getName())) {

                        for (Network city : state.getNetworkList()) {
                            if (cityName.equalsIgnoreCase(city.getName())) {

                                for (Enterprise e : city.getEnterpriseDirectory().getEnterpriseList()) {
                                   
                                    InventoryManagementOrganization org = null;
                                    for (Organization organization : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (organization instanceof InventoryManagementOrganization) {
                                            org = (InventoryManagementOrganization) organization;
                                             
                                            break;
                                        }
                                        
                                    }if(org!=null){
                                        
                                        for (Product pro : org.getPc().getProductList()) {
                                        if (pro.getProductId()== (selectedProduct.getProductId())) {
                                            ArrayList<OrderItem> orderItemList =tempOrder.getOrderItemList();
                                         
                                        
                                        boolean flag = true;
                                        for(OrderItem oi :orderItemList)
                                        {
                                            if(oi.getProduct() == selectedProduct)
                                            {
                                                flag= false;
                                                oi.setQuantity( quantity + oi.getQuantity());
                                                oi.setEnterprise(e);
                                            }
                                        }
                                        if(flag)
                                        {
                                            OrderItem newOi = tempOrder.newOrderItem(selectedProduct, quantity, selectedProduct.getSellingPrice(), e);
                                        }
                                       // selectedProduct.setAvailability(selectedProduct.getAvailability()-quantity);  
                                            
                                        DefaultTableModel model = (DefaultTableModel) orderJTable.getModel();
                                        model.setRowCount(0);
                                        for (OrderItem oit : orderItemList) {
                                            Object[] orderRow = new Object[5];
                                            orderRow[0] = oit;
                                            orderRow[1] = oit.getProduct().getSellingPrice();
                                            orderRow[2] = oit.getQuantity();
                                            orderRow[3] = oit.getOrderItemTotal();
                                            orderRow[4] = oit.getEnterprise();
                                           
                                             model.addRow(orderRow);
                                        selectJButtonActionPerformed(evt);
                                             //break;
                                             
                                             
                                        
                                        }  
                                    
                                    
                                    }
                                }
                                     
                            }
                                    
        
                        }
                    }
                }
            }
        }
            }
        }
        
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_addToCartJButtonActionPerformed

    private void viewProductjButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProductjButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = productJTable.getSelectedRow();
        if(selectedRow<0)
        {
            JOptionPane.showMessageDialog(null, "Select a row first");
            return;
        }
        Product selectedProduct =(Product) productJTable.getValueAt(selectedRow, 4);
        ViewProductDetailJPanel viewProductDetailJPanel = new ViewProductDetailJPanel(userProcessContainer,selectedProduct);
        userProcessContainer.add("viewProductDetailPanel",viewProductDetailJPanel);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_viewProductjButton3ActionPerformed

    private void searchProductjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductjButtonActionPerformed
        // TODO add your handling code here:

        HardToFindItemsJPanel htfjp = new HardToFindItemsJPanel(userProcessContainer,customerPerson, account, system, organization);
        userProcessContainer.add("HardToFindItemsJPanel",htfjp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_searchProductjButtonActionPerformed

    private void checkOutjButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutjButton7ActionPerformed
        // TODO add your handling code here:
        if(tempOrder.getOrderItemList().size()<=0)
        {
            JOptionPane.showMessageDialog(null, "No Item selected to place order");
            return;
        }
    
//        int selectedRow = orderjTable3.getSelectedRow();
//        
//        OrderItem selectedItem =(OrderItem) orderjTable3.getValueAt(selectedRow, 0);
        
        ArrayList<OrderItem> orderItemList =tempOrder.getOrderItemList();
        
            tempOrder.setTotalValueOfOrder(orderItemList);
            tempOrder.setTaxValue((tempOrder.getTotalValueOfOrder()*Order.TAX));
           
            
        
        
        CheckoutJPanel cojp = new CheckoutJPanel(userProcessContainer,tempOrder,customerPerson,account,organization, system);
        userProcessContainer.add("ViewFinalOrderPlaced",cojp);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_checkOutjButton7ActionPerformed

    private void removejButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removejButton6ActionPerformed
        // TODO add your handling code here:
        int selectedRow = orderJTable.getSelectedRow();
        //orderJTable.removeRowSelectionInterval(selectedRow, 0);
        
        OrderItem selectedItem =(OrderItem) orderJTable.getValueAt(selectedRow, 0);
        tempOrder.removeOrder(selectedItem);
        
        DefaultTableModel model = (DefaultTableModel) orderJTable.getModel();
                                        model.setRowCount(0);
                                        for (OrderItem oit : tempOrder.getOrderItemList()) {
                                            Object[] orderRow = new Object[5];
                                            orderRow[0] = oit;
                                            orderRow[1] = oit.getProduct().getSellingPrice();
                                            orderRow[2] = oit.getQuantity();
                                            orderRow[3] = oit.getOrderItemTotal();
                                            orderRow[4] = oit.getEnterprise();
                                           
                                             model.addRow(orderRow);
                                        }
    }//GEN-LAST:event_removejButton6ActionPerformed

    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goJButtonActionPerformed
        // TODO add your handling code here:
        
        //productCatagory();
        String countryName = countryJTextField.getText();
        String stateName = stateJTextField.getText();
        String cityName = cityJTextField.getText();
        customerPerson.setCountry(countryName);
        customerPerson.setState(stateName);
        customerPerson.setCity(cityName);  
        
        int i = 0;
        
        Network network = system.getNetwork();
        for (Network country : network.getNetworkList()) {
            if (countryName.equalsIgnoreCase(country.getName())) {

                for (Network state : country.getNetworkList()) {
                    if (stateName.equalsIgnoreCase(state.getName())) {

                        for (Network city : state.getNetworkList()) {
                            System.err.println(city.getName());
                            if (cityName.equalsIgnoreCase(city.getName())) {
                                    System.err.println(":::::"+city.getName());
                                for (Enterprise e : city.getEnterpriseDirectory().getEnterpriseList()) {
                                   
                                    InventoryManagementOrganization org = null;
                                    for (Organization organization1 : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (organization1 instanceof InventoryManagementOrganization) {
                                            org = (InventoryManagementOrganization) organization1;
                                            break;
                                        }
                                    }
                                            if (org!=null){
                                            for (Product pro : org.getPc().getProductList()) {
                                                if(pro.getProductCategory()== null){
                                                    JOptionPane.showMessageDialog(null, "No Products available to display in this Region!!");
                                                    pCatJComboBox.setEnabled(false);
                                                    DefaultTableModel model = (DefaultTableModel)productJTable.getModel();
                                                    model.setRowCount(0);
                                                    return;
                                                }else{
                                             pCatJComboBox.setEnabled(true);
                                             DefaultTableModel model = (DefaultTableModel)productJTable.getModel();
                                            model.setRowCount(0);
                        
                                             i++;
                                             return;
                                                }
                                            }
                                            }
                                    
                       }
                            } 
                               
                        }
                    }
                }
            }
        }
        if(i == 0)
        {
         JOptionPane.showMessageDialog(null, "Invalid City or State or Country!!! Please Re-enter Correct Location");
                                pCatJComboBox.setEnabled(false);
                             
        }
                            
        
        DefaultTableModel model = (DefaultTableModel)productJTable.getModel();
                                model.setRowCount(0);
                        
                                
    }//GEN-LAST:event_goJButtonActionPerformed

    private void selectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectJButtonActionPerformed
        // TODO add your handling code here:
        String productCat = (String) pCatJComboBox.getSelectedItem();
        int i = 0;
        
        String countryName = countryJTextField.getText();
        String stateName = stateJTextField.getText();
        String cityName = cityJTextField.getText();
        customerPerson.setCountry(countryName);
        customerPerson.setState(stateName);
        customerPerson.setCity(cityName);
        
        Network network = system.getNetwork();
        for (Network country : network.getNetworkList()) {
            if (customerPerson.getCountry().equalsIgnoreCase(country.getName())) {

                for (Network state : country.getNetworkList()) {
                    if (customerPerson.getState().equalsIgnoreCase(state.getName())) {

                        for (Network city : state.getNetworkList()) {
                            if (customerPerson.getCity().equalsIgnoreCase(city.getName())) {

                                for (Enterprise e : city.getEnterpriseDirectory().getEnterpriseList()) {
                                    
                                    InventoryManagementOrganization org = null;
                                    for (Organization organization1 : e.getOrganizationDirectory().getOrganizationList()) {
                                        if (organization1 instanceof InventoryManagementOrganization) {
                                            org = (InventoryManagementOrganization) organization1;
                                            
                                            break;
                                        }
                                        
                                    }if (org != null) {
                                    for (Product pro : org.getPc().getProductList()) {
                                        
                                        if (pro.getProductCategory().equals(productCat)) {
                                            
                                    DefaultTableModel dff = (DefaultTableModel) productJTable.getModel();
                                    dff.setRowCount(0);
                                    Object[] productRow = new Object[6];
                                    productRow[0] = pro.getName();
                                    productRow[1] = pro.getProductId();
                                    productRow[2] = pro.getSellingPrice();
                                    productRow[3] = pro.getAvailability();
                                    productRow[4] = pro;
                                    productRow[5] = e;
                                    i++;
                                    ((DefaultTableModel) productJTable.getModel()).addRow(productRow);
                                } else {
                                    JOptionPane.showMessageDialog(null, "No Products available!!");
                                   break;
                              }
                                        
                                }
                                    return;
                            }
                               
                        }
                                try
                             {
                             productJTable.getValueAt(0, 0).equals("");
                            
                             }
                             catch(Exception ex)
                             {
                                JOptionPane.showMessageDialog(null, "No Products available!!");
                                return;
                            }
                              
                    }
                }
            }
        }
            }
        }
    
        if(i == 0)
        {
            JOptionPane.showMessageDialog(null, "Invalid City or State or Country!!! Please Re-enter Correct Location");
                                return;
                            
        }
        
        
        
        
        
            
                             
    }//GEN-LAST:event_selectJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCartJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton checkOutjButton7;
    private javax.swing.JTextField cityJTextField;
    private javax.swing.JTextField countryJTextField;
    private javax.swing.JButton goJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable orderJTable;
    private javax.swing.JComboBox pCatJComboBox;
    private javax.swing.JTable productJTable;
    private javax.swing.JButton removejButton6;
    private javax.swing.JButton searchProductjButton;
    private javax.swing.JButton selectJButton;
    private javax.swing.JTextField stateJTextField;
    private javax.swing.JButton viewProductjButton3;
    // End of variables declaration//GEN-END:variables
}
