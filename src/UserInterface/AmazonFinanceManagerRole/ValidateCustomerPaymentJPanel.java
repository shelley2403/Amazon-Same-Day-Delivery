/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.AmazonFinanceManagerRole;

import Business.Customer.Customer;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.FinancialAccount.AmazonFinancialAccount;
import Business.Order.OrderItem;
import Business.Organization.AmazonFinanceOrganization;
import Business.Organization.AmazonOrderManagementOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierFinanceOrganization;
import Business.Organization.SupplierOrderManagementOrganization;
import Business.Payment.Payment;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderProcessRequest;
import Business.WorkQueue.AmazonPaymentValidationRequest;
import Business.WorkQueue.SupplierOrderRequest;
import Business.WorkQueue.SupplierPaymentRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sony
 */
public class ValidateCustomerPaymentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount userAccount;
    private AmazonFinanceOrganization organization;
    private Enterprise enterprise;
    /**
     * Creates new form ValidateCustomerPaymentJPanel
     */
    public ValidateCustomerPaymentJPanel(JPanel userProcessContainer, UserAccount account, AmazonFinanceOrganization organization, EcoSystem system, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.system = system;
        this.organization = organization;
        this.enterprise = enterprise;
        populateTable();
        
    }

    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        AmazonFinanceOrganization afmo = null;
        for (Organization organization1 : system.getOrganizationDirectory().getOrganizationList()) {
            if (organization1 instanceof AmazonFinanceOrganization) {
                afmo = (AmazonFinanceOrganization) organization1;

                for (WorkRequest request : afmo.getWorkQueue().getWorkRequestList()) {
                    
                    
                    request.setReceiver(userAccount);
                    
                    Object[] row = new Object[7];
                    row[0] = request.getSender().getCustomer();
                    row[1] = request.getReceiver();
                    row[2] = ((AmazonPaymentValidationRequest) request);
                    row[3] = request.getRequestDate();
                    row[4] = ((AmazonPaymentValidationRequest) request).getInvoiceAmt();
                    row[5] = request.getStatus();
                    row[6] = ((AmazonPaymentValidationRequest) request).getResult();
                    model.addRow(row);
                    
                    
                    System.err.println(((AmazonPaymentValidationRequest) request).getFinalInvoice().getOrder().getOrderId());
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderjTable = new javax.swing.JTable();
        viewDetailsJButton = new javax.swing.JButton();
        validateJButton = new javax.swing.JButton();
        transferAmountJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        transferToSupplierJTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Invoice Number", "Order Date", "Invoice Amount", "Status", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        orderjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Card Type", "Card No.", "Expiration Date", "CVV No."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderjTable);

        viewDetailsJButton.setText("View Customer Card Details");
        viewDetailsJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsJButtonActionPerformed(evt);
            }
        });

        validateJButton.setText("Transfer Amount in Amazon's Account");
        validateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validateJButtonActionPerformed(evt);
            }
        });

        transferAmountJButton.setText("Transfer Amount to Suppliers >>");
        transferAmountJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferAmountJButtonActionPerformed(evt);
            }
        });

        transferToSupplierJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product", "Enterprise", "Delivery Status", "Delivery Date", "Amount Transfered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(transferToSupplierJTable);

        jButton1.setText("View Delivery Status");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(refreshJButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewDetailsJButton)
                                .addGap(46, 46, 46)
                                .addComponent(validateJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(49, 49, 49)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(transferAmountJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(78, 78, 78)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(90, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewDetailsJButton)
                    .addComponent(validateJButton)
                    .addComponent(transferAmountJButton)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void viewDetailsJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }
        
        
        AmazonPaymentValidationRequest request = (AmazonPaymentValidationRequest)workRequestJTable.getValueAt(selectedRow, 2);
        
        

        DefaultTableModel dff = (DefaultTableModel) orderjTable.getModel();
        dff.setRowCount(0);
        Payment payDetails = request.getFinalPayment();
                        
                        Object[] orderRow = new Object[4];
                        orderRow[0] = payDetails.getPaymentMode();
                        orderRow[1] = payDetails.getCardNo();
                        orderRow[2] = payDetails.getExpirationDate();
                        orderRow[3] = payDetails.getCvv();
                        
                        
                        dff.addRow(orderRow);
                    
        
        populateTable();
        //validateJButton.setEnabled(true);
    }//GEN-LAST:event_viewDetailsJButtonActionPerformed

    private void validateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validateJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }
        
        
        AmazonPaymentValidationRequest request = (AmazonPaymentValidationRequest)workRequestJTable.getValueAt(selectedRow, 2);
        System.err.println("Invoice Amount" +request.getFinalInvoice().getTotalInvoiceAmount());
//        Payment payment = request.getFinalPayment();
//        AmazonFinancialAccount afa=   payment.getAmazonFinancialAccount();
        
        
        
        
        
        AmazonFinanceOrganization afmo = null;
        for (Organization organ : system.getOrganizationDirectory().getOrganizationList()) {
            if (organ instanceof AmazonFinanceOrganization) {
                afmo = (AmazonFinanceOrganization) organ;
                
                
             if(!"Processing".equals(request.getStatus()))   {
         /*       if (request.getAmazonFinancialAccount().getAccountValue()== 0.00){
        afmo.getAmazonFinancialAccount().setAccountValue(request.getFinalInvoice().getTotalInvoiceAmount());
        //request.getAmazonFinancialAccount().setAccountValue(request.getFinalInvoice().getTotalInvoiceAmount());
        
            System.err.println("Org Acc Value" +afmo.getAmazonFinancialAccount().getAccountValue());
            System.err.println("Req Acc Value " +request.getFinalInvoice().getTotalInvoiceAmount());
            
            
        }else{ */
        //request.getAmazonFinancialAccount().setAccountValue(request.getFinalInvoice().getTotalInvoiceAmount());
        afmo.getAmazonFinancialAccount().setAccountValue(afmo.getAmazonFinancialAccount().getAccountValue()+request.getFinalInvoice().getTotalInvoiceAmount());
       // }
        
        
        }else{
            JOptionPane.showMessageDialog(null, "The Amount is already Transfered in Amazon's Account");
            }
        
       // request.getAmazonFinancialAccount().setAccountValue(request.getFinalInvoice().getTotalInvoiceAmount());
       // afa.setAccountValue(request.getFinalInvoice().getTotalInvoiceAmount());
        
        System.err.println("Amazon Account contains "+ afmo.getAmazonFinancialAccount().getAccountValue());
        request.setStatus("Processing");
        populateTable();
        
            }
        }
        //transferAmountJButton.setEnabled(true);
    }//GEN-LAST:event_validateJButtonActionPerformed

    private void transferAmountJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferAmountJButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }
        
        
        AmazonPaymentValidationRequest request = (AmazonPaymentValidationRequest) workRequestJTable.getValueAt(selectedRow, 2);

       // if (request.getDeliveryResult() != null) {
        DefaultTableModel model = (DefaultTableModel) transferToSupplierJTable.getModel();
                            model.setRowCount(0);

            for (OrderItem oi : request.getFinalInvoice().getOrder().getOrderItemList()) {
                System.err.println(request.getFinalInvoice().getOrder().getOrderItemList());
                Enterprise e = oi.getEnterprise();
                
                SupplierFinanceOrganization sforg = null;
                AmazonFinanceOrganization afmo = null;

                System.err.println(oi.getDeliveryStatus());
                
                if(!"Amount Transfered".equals(oi.getDeliveryStatus())){
                
                if ("Delivered on Same Day".equals(oi.getDeliveryStatus())) {
                    for (Organization organ : system.getOrganizationDirectory().getOrganizationList()) {
                        if (organ instanceof AmazonFinanceOrganization) {
                            afmo = (AmazonFinanceOrganization) organ;


                            float orderAmount = oi.getOrderItemTotal();
                            float supplierCommission = ((oi.getOrderItemTotal()) * AmazonFinancialAccount.COMMISSION);
                            float finalOrderItemAmount = (orderAmount + supplierCommission);

                            System.err.println(orderAmount);
                            System.err.println(supplierCommission);
                            System.err.println(finalOrderItemAmount);


                           // request.getAmazonFinancialAccount().setAccountValue(request.getAmazonFinancialAccount().getAccountValue() - finalOrderItemAmount);
                            afmo.getAmazonFinancialAccount().setAccountValue(afmo.getAmazonFinancialAccount().getAccountValue() - finalOrderItemAmount);
                            oi.setSupplierTransferAmount(finalOrderItemAmount);

                            System.err.println("Amazon Account now contains " + request.getAmazonFinancialAccount().getAccountValue());
                        }
                    }

                    for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof SupplierFinanceOrganization) {
                            sforg = (SupplierFinanceOrganization) org;

                            sforg.getId().addInvoice(request.getFinalInvoice());
                            sforg.getPh().addPayment(request.getFinalPayment());

                            
                            float orderAmount = oi.getOrderItemTotal();
                            float supplierCommission = ((oi.getOrderItemTotal()) * AmazonFinancialAccount.COMMISSION);
                            float finalOrderItemAmount = (orderAmount + supplierCommission);

                            SupplierPaymentRequest supPayRequest = new SupplierPaymentRequest();
                            supPayRequest.setSender(userAccount);
                            //supPayRequest.setRequestDate(request.getRequestDate());
                            supPayRequest.setInvoiceNo(request.getFinalInvoice().getInvoiceNo());
                            supPayRequest.setStatus("Payment Transfered by Amazon");
                            supPayRequest.setReceivingAmount(finalOrderItemAmount);
                            supPayRequest.setSupplierFinancialAccount(sforg.getSupplierFinancialAccount());
                            sforg.getSupplierFinancialAccount().setAccountValue(finalOrderItemAmount+ sforg.getSupplierFinancialAccount().getAccountValue());
                            
//                sforg.getWorkQueue().getWorkRequestList().add(supPayRequest);
//                userAccount.getWorkQueue().getWorkRequestList().add(supPayRequest);

                            oi.setDeliveryStatus("Amount Transfered");
                            Object[] orderRow = new Object[4];
                            orderRow[0] = oi.getProduct().getName();
                            orderRow[1] = e;
                            orderRow[2]= oi.getDeliveryStatus();
                            orderRow[3] = finalOrderItemAmount;

                            model.addRow(orderRow);
                            break;

                        }
                    }
                }

                if ("Delivered".equals(oi.getDeliveryStatus())) {


                    for (Organization organ : system.getOrganizationDirectory().getOrganizationList()) {
                        if (organ instanceof AmazonFinanceOrganization) {
                            afmo = (AmazonFinanceOrganization) organ;


                            float orderAmount = oi.getOrderItemTotal();

                            float finalOrderItemAmount = (orderAmount);

                            System.err.println(orderAmount);
                            System.err.println(finalOrderItemAmount);


                            //request.getAmazonFinancialAccount().setAccountValue(request.getAmazonFinancialAccount().getAccountValue() - finalOrderItemAmount);
                            afmo.getAmazonFinancialAccount().setAccountValue(afmo.getAmazonFinancialAccount().getAccountValue() - finalOrderItemAmount);
                            oi.setSupplierTransferAmount(finalOrderItemAmount);

                            System.err.println("Amazon Account now contains " + request.getAmazonFinancialAccount().getAccountValue());
                        }
                    }

                    for (Organization org : e.getOrganizationDirectory().getOrganizationList()) {
                        if (org instanceof SupplierFinanceOrganization) {
                            sforg = (SupplierFinanceOrganization) org;

                            sforg.getId().addInvoice(request.getFinalInvoice());
                            sforg.getPh().addPayment(request.getFinalPayment());

                            float orderAmount = oi.getOrderItemTotal();
                            float finalOrderItemAmount = (orderAmount);

                            SupplierPaymentRequest supPayRequest = new SupplierPaymentRequest();
                            supPayRequest.setSender(userAccount);
                            //supPayRequest.setRequestDate(request.getRequestDate());
                            supPayRequest.setInvoiceNo(request.getFinalInvoice().getInvoiceNo());
                            supPayRequest.setStatus("Payment Transfered by Amazon");
                            supPayRequest.setReceivingAmount(finalOrderItemAmount);
                            supPayRequest.setSupplierFinancialAccount(sforg.getSupplierFinancialAccount());
                            
                             sforg.getSupplierFinancialAccount().setAccountValue(finalOrderItemAmount+ sforg.getSupplierFinancialAccount().getAccountValue());
                            
//                sforg.getWorkQueue().getWorkRequestList().add(supPayRequest);
//                userAccount.getWorkQueue().getWorkRequestList().add(supPayRequest);

//                            DefaultTableModel model = (DefaultTableModel) transferToSupplierJTable.getModel();
//                            model.setRowCount(0);
                            oi.setDeliveryStatus("Amount Transfered");
                            Object[] orderRow = new Object[4];
                            orderRow[0] = oi.getProduct().getName();
                            orderRow[1] = e;
                            orderRow[2]= oi.getDeliveryStatus();
                            orderRow[3] = finalOrderItemAmount;


                            model.addRow(orderRow);
                            break;

                        }
                    }

                }
                }else{
                    JOptionPane.showMessageDialog(null, "Amount for Product "+oi.getProduct().getName()+" has already been transfered!");
                }
            }
//        } else {
//
//            JOptionPane.showMessageDialog(null, "This Order has not yet been delivered");
//        }
        jButton1ActionPerformed(evt);
    }//GEN-LAST:event_transferAmountJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a Row First");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) transferToSupplierJTable.getModel();
                            model.setRowCount(0);
        AmazonPaymentValidationRequest request = (AmazonPaymentValidationRequest) workRequestJTable.getValueAt(selectedRow, 2);
        for (OrderItem oi : request.getFinalInvoice().getOrder().getOrderItemList()) {
      
               
                            Object[] orderRow = new Object[5];
                            orderRow[0] = oi.getProduct().getName();
                            orderRow[1] = oi.getEnterprise() ;
                            orderRow[2]= oi.getDeliveryStatus() ==null? "Not Available" :oi.getDeliveryStatus();
                            orderRow[3] = oi.getDeliveryDate() ==null? "Not Available" :oi.getDeliveryDate();
                            orderRow[3] = oi.getSupplierTransferAmount()== 0.0000 ? "Not Transfered" :oi.getSupplierTransferAmount() ;

                            model.addRow(orderRow);
                
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderjTable;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton transferAmountJButton;
    private javax.swing.JTable transferToSupplierJTable;
    private javax.swing.JButton validateJButton;
    private javax.swing.JButton viewDetailsJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
